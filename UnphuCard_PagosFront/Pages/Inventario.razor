@page "/inventario"
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using UnphuCard_Api.DTOS
@using UnphuCard_Api.Models
@inject InventarioService InventarioService
@inject Categoria Categoria


<div class="inventory-management">
    <header>
        <h1>Gestión de Inventario</h1>
    </header>

    <main>
        <div class="actions">
            <button class="button button-ghost" @onclick="GoBack">
                <span class="icon">←</span> Volver al menú principal
            </button>
            <button class="button button-primary" @onclick="() => isAddProductDialogOpen = true">
                <span class="icon">+</span> Agregar Nuevo Producto
            </button>
        </div>

        <div class="product-grid">
            @if (productosInv != null)
            {
                @foreach (var productosInv in productosInv)
            {
                <div class="card">
                    <div class="card-header">
                            <h3>@productosInv.NombreDelProducto</h3>
                        <div class="card-actions">
                            <button class="button button-icon" @onclick="() => ToggleProductEdit(productosInv.Id)">
                                <span class="icon edit-icon">✎</span>
                            </button>
                               @*  <button class="button button-icon" @onclick="() => HandleDelete(productosInv.Id)">
                                <span class="icon delete-icon">🗑</span>
                            </button> *@
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="product-image">
                                <img src="@productosInv.ImagenDelProducto" alt="@productosInv.ImagenDelProducto" />
                        </div>
                            @if (editingProductId == productosInv.Id)
                        {
                                <EditForm Model="@productosInv">
                                <DataAnnotationsValidator />
                                <div class="form-group">
                                        <label for="@($"name-{productosInv.Id}")">Nombre</label>
                                        <InputText id="@($"name-{productosInv.Id}")" @bind-Value="productosInv.NombreDelProducto" />
                                </div>
                                <div class="form-group">

                                 <label for="@($"price-{productosInv.Id}")">Precio</label>
                                 <InputNumber id="@($"price-{productosInv.Id}")" @bind-Value="productosInv.PrecioDelProducto" />

                                </div>
                                <div class="form-group">
                                        <label for="@($"quantity-{productosInv.Id}")">Cantidad</label>
                                        <InputNumber id="@($"quantity-{productosInv.Id}")" @bind-Value="productosInv.CantidadEnElInventario" />

                                </div>
                                <div class="form-group">
                                        <label for="@($"image-{productosInv.Id}")">URL de la imagen</label>
                                        <InputText id="@($"image-{productosInv.Id}")" @bind-Value="productosInv.ImagenDelProducto" />
                                </div>
                                <div class="form-actions">
                                        <button type="button" class="button button-secondary" @onclick="() => ToggleProductEdit(productosInv.Id)">Cancelar</button>
                                        <button @onclick="() => HandleEditProduct(productosInv.Id)" type="submit" class="button button-primary">Guardar</button>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                                <p class="product-name">@productosInv.NombreDelProducto</p>
                                <p class="product-price">Precio: $@(productosInv.PrecioDelProducto?.ToString("F2") ?? "0.00")</p>
                                <p class="product-quantity">Cantidad: @productosInv.CantidadEnElInventario</p>
                        }
                    </div>
                </div>
            }
            }
        </div>
    </main>

 
</div>
@if (isAddProductDialogOpen)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <header class="modal-header">
                <h2>Agregar Nuevo Producto</h2>
                <button class="close-button" @onclick="() => isAddProductDialogOpen = false">×</button>
            </header>
            <main class="modal-body">
                <EditForm Model="@insertproductosInv" >
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="nombreProducto">Nombre del Producto</label>
                        <InputText id="nombreProducto" @bind-Value="insertproductosInv.ProdDescripcion" />
                    </div>
                    <div class="form-group">
                        <label for="precioProducto">Precio</label>
                        <InputNumber id="precioProducto" @bind-Value="insertproductosInv.ProdPrecio" />
                    </div>
                    <div class="form-group">
                        <label for="cantidadProducto">Cantidad</label>
                        <InputNumber id="cantidadProducto" @bind-Value="insertproductosInv.InvCantidad" />
                    </div>
                    <div class="form-group">
                        <label for="categoriaProducto">Categoría</label>
                        <InputSelect id="categoriaProducto" @bind-Value="insertproductosInv.CatProdId">
                            <option value="" disabled selected>Seleccione una categoría</option>
                            @foreach (var categoria in categorias)
                            {
                                <option value="@categoria.CatProdId">@categoria.CatProdDescripcion</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="imagenProducto">Subir Imagen</label>
                        <InputFile id="imagenProducto" OnChange="HandleImageUpload" />
                        @if (!string.IsNullOrEmpty(previewImageUrl))
                        {
                            <div class="image-preview">
                                <img src="@previewImageUrl" alt="Vista previa de la imagen" />
                            </div>
                        }
                    </div>

                    <div class="form-actions">
                        <button type="button" class="button button-secondary" @onclick="() => isAddProductDialogOpen = false">Cancelar</button>
                        <button @onclick="HandleAddProduct" type="submit" class="button button-primary">Guardar</button>
                    </div>
                </EditForm>
            </main>
        </div>
    </div>
}


@code {
    private List<VwInventarioEstablecimiento> productosInv = new List<VwInventarioEstablecimiento>();
    private InsertInventario insertproductosInv = new InsertInventario();
    private Stream fileStream;
    private string fileName;
    private string? previewImageUrl; 
    private List<CategoriaProducto> categorias;
    private int? editingProductId = null;

    [Parameter]
    public int estId { get; set; }
    private bool isAddProductDialogOpen = false;
    private bool IsEditing = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        categorias = await Categoria.GetCategoriasProductosAsync();

        if (estId == 0)
        {
            var uri = new Uri(NavigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("estId", out var estIdValue) && int.TryParse(estIdValue, out var parsedEstId))
            {
                estId = parsedEstId;
            }
            else
            {
                Console.WriteLine("El ID del establecimiento no fue proporcionado o es inválido.");
                return;
            }
        }
        try
        {
            productosInv = await InventarioService.GetInventarioEstablecimientoAsync(estId);
            Console.WriteLine($"Inventario cargado: {productosInv.Count} productos.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el inventario: {ex.Message}");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file.ContentType.StartsWith("image/") && file.Size <= 1048576) 
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 1048576).CopyToAsync(memoryStream);
            fileStream = new MemoryStream(memoryStream.ToArray());
            fileName = file.Name;

            previewImageUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
        else
        {
            Console.WriteLine("Archivo no válido. Solo se permiten imágenes de hasta 1 MB.");
        }
    }

    private void ToggleProductEdit(int id)
    {
        if (editingProductId == id)
        {
            editingProductId = null; 
        }
        else
        {
            editingProductId = id; 
        }
    }
    private async Task HandleEditProduct(int id)
    {
        try
        {
            var producto = productosInv.FirstOrDefault(p => p.Id == id);
            if (producto == null || producto.CantidadEnElInventario < 0 || estId <= 0 || producto.Id <= 0)
            {
                errorMessage = "Los datos del producto no son válidos.";
                return;
            }

            var updateInventario = new UpdateInventario
                {
                    InvCantidad = producto.CantidadEnElInventario,
                    EstId = estId,
                    ProdId = producto.Id,
                };

            var isSuccessful = await InventarioService.EditarProducto(id, updateInventario);
            if (isSuccessful)
            {
                var productoActualizado = productosInv.FirstOrDefault(p => p.Id == id);
                if (productoActualizado != null)
                {
                    productoActualizado.CantidadEnElInventario = updateInventario.InvCantidad.GetValueOrDefault();
                    // productoActualizado. = updateInventario.EstId.GetValueOrDefault();
                }

                await InvokeAsync(StateHasChanged);
                ToggleProductEdit(id);
            }
            else
            {
                errorMessage = $"Error al editar el producto con ID {id}.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }


    // private async Task HandleDelete(int id)
    // {
    //     try
    //     {
    //         var response = await InventarioService.EliminarProducto(id);
    //         if (response.IsSuccessStatusCode)
    //         {
    //             productosInv.RemoveAll(p => p.Id == id);
    //         }
    //         else
    //         {
    //             Console.WriteLine($"Error al eliminar el producto con ID {id}: {response.ReasonPhrase}");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error: {ex.Message}");
    //     }
    // }


    private async Task HandleAddProduct()
    {
        try
        {
            if (fileStream != null)
            {
                insertproductosInv.EstId = estId;
                insertproductosInv.StatusId = 1;
                var result = await InventarioService.RegistrarInventarioConImagen(insertproductosInv, fileStream, fileName);
                if (result)
                {
                    insertproductosInv = new InsertInventario();
                    fileStream = null;
                    fileName = string.Empty;
                    previewImageUrl = null;
                    productosInv = await InventarioService.GetInventarioEstablecimientoAsync(estId);

                    isAddProductDialogOpen = false;

                }
            }
            else
            {
                throw new ApplicationException("Debe subir una imagen antes de registrar el producto.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/index");
    }

   
}
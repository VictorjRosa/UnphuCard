@page "/resumen"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using UnphuCard_Api.Models
@using UnphuCard_Api.DTOS
@inject CartService CartService
@inject SesionService Sesion
@inject AuthService AuthService
@inject CompraService Compra
@inject SesionService Sesion
@inject Blazored.SessionStorage.ISessionStorageService SessionStorageService

<div class="min-h-screen bg-gray-50 flex flex-col">
    <header class="bg-green-700 text-white p-4 flex justify-between items-center">
        <Header></Header>
    </header>

    <main class="cart-main">
        <button class="button button-ghost" @onclick="GoBack">
            <span class="back-icon">←</span> Volver a la tienda
        </button>

        <div class="card w-full max-w-2xl mx-auto">
            <div class="card-header">
                <h2 class="text-2xl font-bold">Resumen del Carrito</h2>
            </div>
            <div class="card-content">
                @foreach (var item in CartService.GetCartItems())
                {
                    <div class="flex items-center justify-between mb-4 pb-4 border-b">
                        <div class="flex items-center">
                            <img src="@item.ImagenDelProducto" alt="@item.NombreDelProducto" width="50" height="50" class="rounded-md mr-4" />
                            <div>
                                <p class="font-semibold">@item.NombreDelProducto</p>
                                <p class="text-sm text-gray-600">Cantidad: @item.Quantity</p>
                            </div>
                        </div>
               <p class="font-semibold">$@((item.PrecioDelProducto.GetValueOrDefault() * item.Quantity).ToString("F2"))</p>

                    </div>
                }
                <div class="flex justify-between items-center mt-6 pt-6 border-t">
                    <p class="text-xl font-bold">Total:</p>
                    <p class="text-xl font-bold">$@(CartService.GetTotal().ToString("F2"))</p>
                </div>
            </div>
            <div class="card-footer flex flex-col items-stretch payment-methods ">
                <div class="payment-card__header">
                    <h4 class="payment-card__title">Método de Pago</h4>
                </div>   
                <div class="payment-card__content">
                <div class="payment-options">

                <InputRadioGroup @bind-Value="selectedPaymentMethod" name="metodoPago">

                    @foreach (var metodo in MetodosPago)
                    {
                        if (metodo.MetPagId != 5)
                        {
                            <div class="flex items-center space-x-2">
                                <InputRadio TValue="int" value="@metodo.MetPagId" id="@metodo.MetPagId" />
                                <label for="@metodo.MetPagId" class="flex items-center space-x-2">
                                    @if (metodo.MetPagId == 1)
                                    {
                                        <span class="mr-2">💳</span>
                                    }
                                    else if (metodo.MetPagId == 2)
                                    {
                                        <span class="mr-2">👛</span>
                                    }
                                    else if (metodo.MetPagId == 3)
                                    {
                                        <span class="mr-2">💵</span>
                                    }
                                    @metodo.MetPagDescripcion
                                </label>
                            </div>
                        }
                    }
                </InputRadioGroup>

                        <button class="payment-buttonn" @onclick="HandleCheckout">
                    Iniciar Pago
                </button>
                            </div>
                </div>

            </div>
        </div>
    </main>
   
    @if (isScanning)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white p-4 rounded-md max-w-md w-full">
                <h2 class="text-xl font-bold mb-4">
                    @if (scanResult == "scanning")
                    {
                        <text>Esperando escaneo de QR</text>
                    }
                    else if (scanResult == "success")
                    {
                        <text>Escaneo Exitoso</text>
                    }
                    else if (scanResult == "error")
                    {
                        <text>Error en el Escaneo</text>
                    }
                    else if (scanResult == "payment_success")
                    {
                        <text>Pago Exitoso</text>
                    }
                    else if (scanResult == "insufficient_funds")
                    {
                        <text>Saldo Insuficiente</text>
                    }
                </h2>
                <div class="flex flex-col items-center justify-center py-8">
                    @if (scanResult == "scanning")
                    {
                        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-green-600"></div>
                        <svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="spinnerGradient" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#2E7D32;stop-opacity:1"/>
      <stop offset="100%" style="stop-color:#2E7D32;stop-opacity:0.3"/>
    </linearGradient>
  </defs>

  <g class="spinner">
    <circle 
      cx="50" 
      cy="50" 
      r="40" 
      fill="none" 
      stroke="url(#spinnerGradient)" 
      stroke-width="8" 
      stroke-linecap="round"
      stroke-dasharray="180 100"
    />
  </g>
</svg>
                        <p class="mt-4 text-center text-gray-600">
                            Por favor, escanee el código QR con su UnphuCard para completar el pago.
                        </p>
                    }
                    else if (scanResult == "success")
                    {
                        <span class="text-green-600 text-6xl">✓</span>
                        <p class="mt-4 text-center text-gray-600">
                            Código QR escaneado correctamente.
                        </p>
                        <p class="mt-2 text-center text-xl font-semibold">
                            Usuario: @userName
                        </p>
                        <button @onclick="HandleConfirmPayment" class="mt-4 w-full bg-green-600 hover:bg-green-700 text-white p-2 rounded">
                            Confirmar Cobro
                        </button>
                    }
                    else if (scanResult == "error")
                    {
                        <span class="text-red-600 text-6xl">✗</span>
                        <p class="mt-4 text-center text-gray-600">
                            Hubo un error al escanear el código QR. Por favor, intente nuevamente.
                        </p>
                    }
                    else if (scanResult == "payment_success")
                    {
                        <span class="text-green-600 text-6xl">✓</span>
                        <p class="mt-4 text-center text-gray-600">
                            El pago se ha procesado con éxito.
                        </p>
                    }
                    else if (scanResult == "insufficient_funds")
                    {
                        <span class="text-red-600 text-6xl">✗</span>
                        <p class="mt-4 text-center text-gray-600">
                            Saldo insuficiente. Por favor, recargue su UnphuCard e intente nuevamente.
                        </p>
                    }
                   
                </div>
               @*  @if (scanResult == "error" || errorMessage == "Saldo insuficiente." || errorMessage == "Transacción exitosa.")
                {
                    <button @onclick="CloseDialog" class="w-full bg-gray-200 text-gray-800 p-2 rounded">
                        Cerrar
                    </button>
                } *@
            </div>
            <button class="absolute top-2 right-2 text-gray-500" @onclick="CloseDialog">&times;</button>
        </div>
    }
</div>

@code {

    private List<MetodoPago> MetodosPago { get; set; } = new List<MetodoPago>();
    private bool isScanning = false;
    private string scanResult = null;
    private string errorMessage = null;

    private int userId;
    private int usercodigo;

    private string userName = "";
    private int selectedPaymentMethod = 0;
    private bool userIdFound = false;
    private InsertCompra compra = new InsertCompra();

    private void GoBack()
    {
        NavigationManager.NavigateTo("/compras");
    }

    private async Task HandleCheckout()
    {
        if (selectedPaymentMethod == 1)
        {
            isScanning = true;
            scanResult = "scanning";

            await CheckUserSessionAsync();

            if (userIdFound)
            {
                var usuario = await AuthService.GetStudentInfoAsync(userId);

                if (usuario != null)
                {
                    userName = $"{usuario.UsuNombre} {usuario.UsuApellido}";
                    usercodigo = usuario.UsuCodigo;
                    scanResult = "success";
                }
                else
                {
                    scanResult = "error";
                }
            }
            else
            {
                scanResult = "error";
            }

            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Procesando pago con:");
        }
    }

    private async Task CheckUserSessionAsync()
    {
        while (!userIdFound)
        {
            userIdFound = await CheckSessionForUserIdAsync();

            if (!userIdFound)
            {
                await Task.Delay(2000); 
            }
        }
        StateHasChanged(); 
    }

    private async Task<bool> CheckSessionForUserIdAsync()
    {
        try
        {
            var sesionToken = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "sesionToken");
            if (string.IsNullOrEmpty(sesionToken))
            {
                Console.WriteLine("No se encontró el token de sesión.");
                return false;
            }

            var response = await Sesion.SesionUser(sesionToken);

            if (response.HasValue)
            {
                userIdFound = true;
                userId = response.Value;
            }

            else
            {
                userIdFound = false;
            }

            return userIdFound;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar la sesión: {ex.Message}");
            userIdFound = false;
            return userIdFound;
        }
    }


    private async Task HandleConfirmPayment()
    {
        try
        {
            var sesionToken = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "sesionToken");
            int? sesionid = await Sesion.ObtenerSesionPorTokenAsync(sesionToken);

            compra.MetPagId = selectedPaymentMethod;
            compra.SesionId = sesionid;
            compra.EstId = await SessionStorageService.GetItemAsync<int>("EstId");
            compra.UsuCodigo = usercodigo;
            compra.CompMonto = CartService.GetTotal();
            errorMessage = null;

            foreach (var item in CartService.GetCartItems())
            {
                var detalleCompra = new InsertDetalleCompra
                    {
                        DetCompCantidad = item.Quantity,
                        DetCompPrecio = item.PrecioDelProducto.GetValueOrDefault() * item.Quantity,
                        ProdId = item.IdDelProducto,
                        SesionId = sesionid
                    };

                var detalleResponse = await Compra.RegistrarDetalleCompra(detalleCompra);
                if (!detalleResponse)
                {
                    throw new ApplicationException($"Error al registrar el producto: {item.NombreDelProducto}");
                }
            }

            var result2 = await Compra.Pagar(compra);
            if (!result2)
            {
                throw new ApplicationException("Error al procesar el pago.");
            }


            scanResult = "payment_success";
            StateHasChanged();

            await Task.Delay(3000);

            CartService.ClearCartAsync();
            NavigationManager.NavigateTo("/index");
        }
        catch (ApplicationException ex)
        {
            errorMessage = ex.Message;

            if(errorMessage == "Saldo insuficiente.")
            {
                scanResult = "insufficient_funds";

            }
         
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred.";
            Console.WriteLine(ex.Message);
        }
    }


    private void CloseDialog()
    {
        isScanning = false;
        scanResult = null;
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            MetodosPago = new List<MetodoPago>();

            MetodosPago = await Http.GetFromJsonAsync<List<MetodoPago>>("api/MostrarMetodoPago");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los métodos de pago: {ex.Message}");
        }

    }
   


    
}

@* @page "/compras"
@inject IJSRuntime JSRuntime
@using UnphuCard_Api.DTOS
@using UnphuCard_Api.Models
@inject Categoria Categoria
@inject ProductosService Producto

<div class="min-h-screen bg-gray-50 flex flex-col">
    <header class="bg-green-700 text-white p-4 flex justify-between items-center">
        <h1 class="text-2xl font-bold">Tienda UNPHU</h1>
        <button class="bg-white hover:bg-gray-100 text-black p-2 rounded-lg flex items-center gap-2 transition-colors duration-200 shadow-md hover:shadow-lg border border-gray-200"
                @onclick="() => showCart = true">
            <span class="text-xl">🛒</span>
            Ver Carrito (@cart.Sum(item => item.Quantity))
        </button>
    </header>
    <main class="flex-grow p-4">
        <div class="mb-4 flex space-x-4">
            <div class="relative flex-grow">
                <input type="text" placeholder="Buscar productos..." @bind="searchTerm" @bind:event="oninput"
                       class="pl-10 w-full p-2 border rounded-md" />
                <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">&#128269;</span>
            </div>
            <select @onchange="FiltrarProductosPorCategoria" class="w-[180px] p-2 border rounded-md">
                <option value="Todas">Todas</option>

                @foreach (var categoria in categorias)
                {
                    <option value="@categoria.CatProdId">@categoria.CatProdDescripcion</option>
                }
            </select>
           
          

        </div>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
            @foreach (var producto in filteredProducts)
            {
                <div class="card cursor-pointer hover:shadow-lg transition-shadow" @onclick="() => OpenProductDialog(product)">
                    <div class="p-4 flex flex-col items-center">
                        <img src="@producto.ProdImagenes" alt="@producto.ProdImagenes" width="100" height="100" class="mb-2 rounded-md" />
                        <h3 class="font-bold text-lg mb-1 text-center">@producto.ProdDescripcion</h3>
                        <p class="text-gray-600">
                            $@(producto.ProdPrecio.HasValue ? producto.ProdPrecio.Value.ToString("F2") : "0.00")
                        </p>
                        <p class="text-sm text-gray-500">@producto.CatProdId</p>
                    </div>
                </div>
            }
        </div>
    </main>

    @if (selectedProduct != null)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white p-4 rounded-md max-w-md w-full">
                <h2 class="text-xl font-bold mb-4">@selectedProduct.Name</h2>
                <img src="@selectedProduct.Image" alt="@selectedProduct.Name" width="200" height="200" class="mb-4 rounded-md mx-auto" />
                <p class="text-lg font-semibold mb-4">Precio: $@selectedProduct.Price.ToString("F2")</p>
                <p class="text-md text-gray-600 mb-4">Categoría: @selectedProduct.Category</p>
                <div class="flex items-center justify-center space-x-4 mb-4">
                    <button class="p-2 border rounded-md" @onclick="() => quantity = Math.Max(1, quantity - 1)">-</button>
                    <input type="number" @bind="quantity" class="w-20 text-center p-2 border rounded-md" />
                    <button class="p-2 border rounded-md" @onclick="() => quantity++">+</button>
                </div>
                <div class="flex justify-end">
                    <button class="bg-green-600 text-white p-2 rounded-md" @onclick="AddToCart">Agregar al Carrito</button>
                </div>
                <button class="absolute top-2 right-2 text-gray-500" @onclick="CloseProductDialog">&times;</button>
            </div>
        </div>
    }

    @if (showCart)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white p-4 rounded-md max-w-md w-full">
                <h2 class="text-xl font-bold mb-4">Carrito de Compras</h2>
                @if (cart.Count == 0)
                {
                    <p>El carrito está vacío.</p>
                }
                else
                {
                    @foreach (var item in cart)
                    {
                        <div class="flex items-center justify-between mb-4">
                            <div class="flex items-center">
                                <img src="@item.Image" alt="@item.Name" width="50" height="50" class="rounded-md mr-4" />
                                <div>
                                    <p class="font-semibold">@item.Name</p>
                                    <p class="text-sm text-gray-600">$@item.Price.ToString("F2")</p>
                                </div>
                            </div>
                            <div class="flex items-center">
                                <button class="p-1 border rounded-md" @onclick="() => UpdateCartItemQuantity(item.Id, item.Quantity - 1)">-</button>
                                <span class="mx-2">@item.Quantity</span>
                                <button class="p-1 border rounded-md" @onclick="() => UpdateCartItemQuantity(item.Id, item.Quantity + 1)">+</button>
                                <button class="ml-2 text-red-500" @onclick="() => RemoveFromCart(item.Id)">&#128465;</button>
                            </div>
                        </div>
                    }
                }
                <div class="flex justify-end mt-4">
                    <button class="bg-gray-200 text-gray-800 p-2 rounded-md" @onclick="() => showCart = false">Cerrar</button>
                </div>
            </div>
        </div>
    }

    <footer class="bg-green-800 text-white text-center p-4">
        <p>&copy; 2023 UNPHU - Plataforma de Compra. Todos los derechos reservados.</p>
    </footer>
</div>

@code {
 
    private List<CategoriaProducto>? categorias;
    private List<Producto> productos = new List<Producto>();
    private List<Producto> filteredProducts = new List<Producto>();

    protected override async Task OnInitializedAsync()
    {
        categorias = await Categoria.GetCategoriasProductosAsync();
        productos = await Producto.TodoProducto();
        filteredProducts = productos;
    }

    private List<string> categories = new List<string> { "Todas" };
    private string searchTerm = "";
    private string selectedCategory = "Todas";
    private Producto selectedProduct;
    private int quantity = 1;
    private List<CartItem> cart = new List<CartItem>();
    private bool showCart = false;

    private async Task FiltrarProductosPorCategoria(ChangeEventArgs e)
    {
        var categoriaIdString = e.Value?.ToString();

        if (string.IsNullOrEmpty(categoriaIdString) || categoriaIdString == "Todas")
        {
            filteredProducts = productos; 
        }
        else
        {
            if (int.TryParse(categoriaIdString, out int categoriaId))
            {
                filteredProducts = await Producto.ProductoPorCategoria(categoriaId);
            }
            else
            {
                Console.WriteLine("Error: El valor de categoría no es válido.");
                filteredProducts = new List<Producto>();
            }
        }
    }

    // private List<Product> filteredProducts => allProducts
    //     .Where(p => p.Name.ToLower().Contains(searchTerm.ToLower()) &&
    //                 (selectedCategory == "Todas" || p.Category == selectedCategory))
    //     .ToList();

    private void OpenProductDialog(Producto producto)
    {
        selectedProduct = producto;
        quantity = 1;
    }

    private void CloseProductDialog()
    {
        selectedProduct = null;
        quantity = 1;
    }

    private void AddToCart()
    {
        var existingItem = cart.FirstOrDefault(item => item.Id == selectedProduct.Id);
        if (existingItem != null)
        {
            existingItem.Quantity += quantity;
        }
        else
        {
            cart.Add(new CartItem
                {
                    Id = selectedProduct.ProdId,
                    Name = selectedProduct.ProdDescripcion,
                    Price = selectedProduct.ProdPrecio,
                    Image = selectedProduct.ProdImagenes,
                    Quantity = quantity
                });
        }
        CloseProductDialog();
    }

    private void UpdateCartItemQuantity(int id, int newQuantity)
    {
        var item = cart.FirstOrDefault(i => i.Id == id);
        if (item != null)
        {
            if (newQuantity <= 0)
            {
                cart.Remove(item);
            }
            else
            {
                item.Quantity = newQuantity;
            }
        }
    }

    private void RemoveFromCart(int id)
    {
        cart.RemoveAll(item => item.Id == id);
    }

    // public class Product
    // {
    //     public int Id { get; set; }
    //     public string Name { get; set; }
    //     public decimal Price { get; set; }
    //     public string Image { get; set; }
    //     public string Category { get; set; }
    // }

    public class CartItem : Producto
    {
        public int Quantity { get; set; }
    }
} *@
@page "/compras"
@inject IJSRuntime JSRuntime
@using Blazored.SessionStorage
@using UnphuCard_Api.DTOS
@using UnphuCard_Api.Models
@using static UnphuCard_PagosFront.Data.CartService
@inject Categoria Categoria
@inject ProductosService Producto
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject CartService CartService
@inject CompraService CompraService
@inject ISessionStorageService sessionStorage

<div class="min-h-screen bg-gray-50 flex flex-col">
    <header class="bg-green-700 text-white p-4 flex justify-between items-center">
        <Header></Header>
        <button class="bg-white hover:bg-gray-100 text-black p-2 rounded-lg flex items-center gap-2 transition-colors duration-200 "
        @onclick="() => showCart = true">
            <span class="text-xl">🛒</span>
            Ver Carrito (@CartService.GetCartItems().Sum(item => item.Quantity))
        </button>
    </header>
    <main class="flex-grow p-4">
        <div class="mb-4 flex space-x-4">
            <div class="search-container">
                <div class="search-icon">&#128269;</div>
                <input type="text"
                placeholder="Buscar productos..."
                @bind="searchTerm"
                @oninput="ClearProducts"
                class="search-input" />

                <!-- Botón de limpiar (ícono de la 'X') -->
                <button class="clear-button" @onclick="ClearSearch">
                    &#10005;
                </button>

                <button class="search-button" @onclick="BuscarProducto">
                    <span class="mr-2">←</span> Buscar
                </button>
            </div>
            <select @onchange="FiltrarProductosPorCategoria" class="w-[180px] p-2 border rounded-md">
                <option value="1000">Todas</option>
                @if (categorias != null)
                {
                    @foreach (var categoria in categorias)
                    {
                        <option value="@categoria.CatProdId">@categoria.CatProdDescripcion</option>
                    }
                }
            </select>
        </div>
        <button class="button button-ghost" @onclick="GoBack">
            <span class="mr-2">←</span> Volver a inicio
        </button>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
            @if (filteredProducts != null)
            {
                @foreach (var producto in filteredProducts)
                {
                    <div class="card cursor-pointer hover:shadow-lg transition-shadow" @onclick="() => OpenProductDialog(producto)">
                        <div class="p-4 flex flex-col items-center">
                            <img src="@producto.ImagenDelProducto" alt="@producto.ImagenDelProducto" width="100" height="100" class="mb-2 rounded-md" />
                            <h3 class="font-bold text-lg mb-1 text-center">@producto.NombreDelProducto</h3>
                            <p class="text-gray-600">
                                $@(producto.PrecioDelProducto.HasValue ? producto.PrecioDelProducto.Value.ToString("F2") : "0.00")
                            </p>
                        </div>
                    </div>
                }
            }
        </div>
    </main>

    @if (selectedProduct != null)
    {
        <div class="product-card">

            <div class="product-content fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center" @onclick="HandleBackdropClick">
                <div class="product-content bg-white p-4 rounded-md max-w-md w-full relative" @onclick:stopPropagation>
                    <h2 class="text-xl font-bold mb-4">@selectedProduct.NombreDelProducto</h2>
                    <img src="@selectedProduct.ImagenDelProducto" alt="@selectedProduct.NombreDelProducto" width="200" height="200" class="mb-4 rounded-md mx-auto" />
                    <p class="text-lg font-semibold mb-4">Precio: $@(selectedProduct.PrecioDelProducto?.ToString("F2") ?? "0.00")</p>
                    @if (disponibilidadActual != null && disponibilidadActual.All(d => d.CantidadEnElInventario == 0) && disponibilidad?.Any() == true && disponibilidad.Any(d => d.CantidadEnElInventario > 0))
                    {
                        <div class="disponibilidad">

                            <p>No se encontró disponibilidad en esta cafeteria.</p>
                        </div>

                    }

                    <div class="separator"></div>

                    @if (disponibilidad?.Any() == true && disponibilidad.Any(d => d.CantidadEnElInventario > 0))
                    {
                        <div class="availability-section">
                            <h5 class="section-title accent">Disponible en:</h5>
                            <div class="locations-grid">

                                @foreach (var establecimiento in disponibilidad)
                                {
                                    <div class="location-card">
                                        <span class="location-name">@establecimiento.NombreDelEstablecimiento </span>
                                        <div class="stock-info">
                                            <span class="stock-label">Stock:</span>
                                            <span class="stock-amount">@establecimiento.CantidadEnElInventario</span>
                                        </div>
                                    </div>


                                }
                            </div>
                        </div>

                    }
                    else if (disponibilidad != null && disponibilidad.All(d => d.CantidadEnElInventario == 0))
                    {
                        <div class="disponibilidad">

                            <p>No se encontró disponibilidad para este producto.</p>
                        </div>
                    }

                    <div class="separator"></div>

                    <div class="flex items-center justify-center space-x-4 mb-4">
                        <button class="p-2 border rounded-md" @onclick="() => quantity = Math.Max(1, quantity - 1)" disabled="@((disponibilidad?.Any() ?? false) == false || disponibilidadActual == null || !disponibilidadActual.Any())">-</button>
                        <input type="number" @bind="quantity" class="w-20 text-center p-2 border rounded-md" disabled="@((disponibilidad?.Any() ?? false) == false || disponibilidadActual == null || !disponibilidadActual.Any())" />
                        <button class="p-2 border rounded-md" @onclick="() => quantity++" disabled="@((disponibilidad?.Any() ?? false) == false || disponibilidadActual == null || !disponibilidadActual.Any())">+</button>
                    </div>
                    <div class ="flex items-center justify-center space-x-4 mb-4">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="floating-alert">
                                @errorMessage
                                <span class="floating-alert-close">&times;</span>
                            </div>
                        }
                    </div>
                    <div class="flex justify-end">
                        <button class="search-button" @onclick="AddToCartAsync" disabled="@((disponibilidad?.Any() ?? false) == false || disponibilidadActual == null || !disponibilidadActual.Any())">Agregar al Carrito</button>
                    </div>
                </div>
            </div>
        </div>

    }


    @if (showCart)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center" @onclick="HandleBackdropClick" >
            <div class="bg-white p-4 rounded-md max-w-md w-full" @onclick:stopPropagation>
                <h2 class="text-xl font-bold mb-4">Carrito de Compras</h2>
                @if (CartService.GetCartItems().Count == 0)
                {
                    <p>El carrito está vacío.</p>
                }
                else
                {
                    @foreach (var item in CartService.GetCartItems())
                    {
                        <div class="flex items-center justify-between mb-4">
                            <div class="flex items-center">
                                <img src="@item.ImagenDelProducto" alt="@item.NombreDelProducto" width="50" height="50" class="rounded-md mr-4" />
                                <div>
                                    <p class="font-semibold">@item.NombreDelProducto</p>
                                    <p class="text-sm text-gray-600">$@(item.PrecioDelProducto?.ToString("F2") ?? "0.00")</p>
                                </div>


                            </div>
                            <div class="flex items-center">
                                <button class="p-1 border rounded-md" @onclick="() => UpdateCartItemQuantityAsync(item.IdDelProducto, item.Quantity - 1)">-</button>
                                <span class="mx-2">@item.Quantity</span>
                                <button class="p-1 border rounded-md" @onclick="() => UpdateCartItemQuantityAsync(item.IdDelProducto, item.Quantity + 1)">+</button>
                                <button class="ml-2 text-red-500" @onclick="() => RemoveFromCartAsync(item.IdDelProducto)">&#128465;</button>
                            </div>
                        </div>
                        <div class="flex items-center justify-center space-x-4 mb-4">
                            @if (!string.IsNullOrEmpty(errorMessage) && item.NombreDelProducto == nombreProducto)
                            {
                                <div class="floating-alert">
                                    @errorMessage
                                    <span class="floating-alert-close">&times;</span>
                                </div>
                            }
                        </div>
                    }
                }
                <div class="flex justify-between mt-4">
                    <button class="btn-primary" @onclick="() => showCart = false">Atras</button>
                    <button class="search-button" @onclick="IraResumen" disabled="@(!CartService.GetCartItems().Any())">Ir a Pagar</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string errorMessage;
    private List<VwInventarioEstablecimiento> disponibilidad;
    private List<CategoriaProducto> categorias;
    private List<VwProducto> productos = new List<VwProducto>();
    private List<VwProducto> filteredProducts = new List<VwProducto>();
    private List<VwProducto> searchedProducts = new List<VwProducto>();
    private string establishmentName = "";
    private List<VwInventarioEstablecimiento> disponibilidadActual;
    private string nombreProducto = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            errorMessage = "";
            int userId = await AuthService.GetUserIdFromTokenAsync();
            var estNombreResult = await AuthService.GetEstNombreByUserIdAsync(userId);
            establishmentName = estNombreResult ?? "Tienda";
            await Task.CompletedTask;

            int idCafeteriaActual = await sessionStorage.GetItemAsync<int>("estId");
            await CartService.InitializeCartAsync();
            categorias = await Categoria.GetCategoriasProductosAsync();
            productos = await Producto.TodoProducto();
            filteredProducts = productos;
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading entities.";
            Console.WriteLine(ex.Message);
        }
    }

    private string searchTerm = "";
    private int selectedCategory = 1000;
    private VwProducto selectedProduct;
    private int quantity = 1;
    private bool showCart = false;


    private async Task FiltrarProductosPorCategoria(ChangeEventArgs e)
    {
        searchedProducts.Clear();
        var categoriaIdString = e.Value?.ToString();
        selectedCategory = Convert.ToInt16(categoriaIdString);
        var busqueda = await Producto.ProductoNormalizado(searchTerm, selectedCategory);

        if (string.IsNullOrEmpty(categoriaIdString) || categoriaIdString == "1000")
        {
            filteredProducts = productos;
        }
        else
        {
            foreach (var item in productos)
            {
                if (busqueda == item.NombreDelProducto)
                {
                    // Filtra los productos por nombre
                    searchedProducts.Add(item);
                }
                else if (item.IdDeLaCategoríaDelProducto == selectedCategory && item.NombreDelProducto.ToLower().Contains(searchTerm.ToLower()))
                {
                    // Filtra los productos por nombre
                    searchedProducts.Add(item);
                }
                // else if (item.IdDeLaCategoríaDelProducto == selectedCategory)
                // {
                //     // Filtra los productos por nombre
                //     searchedProducts.Add(item);
                // }
                else
                {
                    Console.WriteLine("Error: El valor de categoría no es válido.");
                    filteredProducts = new List<VwProducto>();
                }
            }
            filteredProducts = searchedProducts;
            // if (int.TryParse(categoriaIdString, out int categoriaId))
            // {
            //     filteredProducts = await Producto.ProductoPorCategoria(categoriaId);
            // }
            // else
            // {
            //     Console.WriteLine("Error: El valor de categoría no es válido.");
            //     filteredProducts = new List<VwProducto>();
            // }
        }
    }

    private async Task BuscarProducto()
    {
        searchedProducts.Clear();
        if (searchTerm != "")
        {
            var busqueda = await Producto.ProductoNormalizado(searchTerm, selectedCategory);
            // Si no hay término de búsqueda, se muestran todos los productos
            if (string.IsNullOrEmpty(searchTerm))
            {
                filteredProducts = productos;
            }
            else
            {
                foreach (var item in productos)
                {
                    if (busqueda == item.NombreDelProducto)
                    {
                        // Filtra los productos por nombre
                        searchedProducts.Add(item);
                    }
                    else if (item.NombreDelProducto != null && item.NombreDelProducto.ToLower().Contains(searchTerm.ToLower()) && item.IdDeLaCategoríaDelProducto == selectedCategory)
                    {
                        // Filtra los productos por nombre
                        searchedProducts.Add(item);
                    }
                    else if (item.NombreDelProducto != null && item.NombreDelProducto.ToLower().Contains(searchTerm.ToLower()) && selectedCategory == 1000)
                    {
                        // Filtra los productos por nombre
                        searchedProducts.Add(item);
                    }
                }
                filteredProducts = searchedProducts;
            }
        }
    }

    private void ClearProducts()
    {
        searchedProducts.Clear();
    }

    private void ClearSearch()
    {
        searchTerm = ""; // Limpiar el campo de búsqueda
        filteredProducts = productos; // Restablecer los productos a todos
        searchedProducts.Clear();
    }

    private async Task OpenProductDialog(VwProducto producto)
    {
        selectedProduct = producto;
        quantity = 1;
        disponibilidadActual = null;
        disponibilidad = null; 
        disponibilidad = await CompraService.GetEstablecimientoporCategoria(producto.IdDelProducto);
        int idCafeteriaActual = await sessionStorage.GetItemAsync<int>("estId");
        disponibilidadActual = disponibilidad?.Where(d => d.IdDelEstablecimiento == idCafeteriaActual && d.CantidadEnElInventario > 0).ToList();

        StateHasChanged();

    }

    private void CloseProductDialog()
    {
        errorMessage = "";
        selectedProduct = null;
        quantity = 1;
    }

    private async Task AddToCartAsync()
    {
        errorMessage = "";
        if (selectedProduct != null)
        {
            int idCafeteriaActual = await sessionStorage.GetItemAsync<int>("estId");
            var cantidad = await CompraService.ObtenerInvCantidad(selectedProduct.IdDelProducto, idCafeteriaActual);
            if (quantity < 0)
            {
                errorMessage = "No puede elegir un valor negativo.";
            }
            else if (quantity == 0)
            {
                errorMessage = "No elegió una cantidad.";
            }
            else if (quantity <= cantidad)
            {
                await CartService.AddToCartAsync(new CartService.CartItem
                    {
                        IdDelProducto = selectedProduct.IdDelProducto,
                        NombreDelProducto = selectedProduct.NombreDelProducto,
                        PrecioDelProducto = selectedProduct.PrecioDelProducto,
                        ImagenDelProducto = selectedProduct.ImagenDelProducto,
                        Quantity = quantity
                    });
                CloseProductDialog();
            }
            else
            {
                errorMessage = $"No hay más {selectedProduct.NombreDelProducto} disponible.";
            }
        }
    }


    private async Task UpdateCartItemQuantityAsync(int id, int newQuantity)
    {
        errorMessage = "";
        int idCafeteriaActual = await sessionStorage.GetItemAsync<int>("estId");
        var cantidad = await CompraService.ObtenerInvCantidad(id, idCafeteriaActual);
        if (newQuantity <= cantidad)
        {
            await CartService.UpdateCartItemQuantityAsync(id, newQuantity);
        }
        else
        {
            nombreProducto = productos.Where(p => p.IdDelProducto == id).Select(p => p.NombreDelProducto).FirstOrDefault();
            errorMessage = $"No hay más {nombreProducto} disponible.";
        }
    }

    private async Task RemoveFromCartAsync(int id)
    {
        await CartService.RemoveFromCartAsync(id);
    }

    private void IraResumen()
    {
        if (CartService.GetCartItems().Any())
        {
            NavigationManager.NavigateTo("/resumen");
        }
        else
        {
            Console.WriteLine("El carrito está vacío, no se puede proceder al pago.");
        }
    }
    private async Task GoBack()
    {
        await CartService.ClearCart();
        NavigationManager.NavigateTo("/index");
    }
    private void HandleBackdropClick()
    {
        showCart = false;
        CloseProductDialog();
    }

}

@page "/index"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject TarjetasProvs tarjetasProvs
@inject Estados estados
@inject Usuarios usuarios
@using UnphuCard_Api.Models
@using UnphuCard_Api.DTOS

<div class="min-h-screen bg-gray-50 flex flex-col">
    <header class="bg-green-700 text-white p-4">
        <h1 class="text-2xl font-bold">Plataforma de Acceso UNPHU</h1>
        <button @onclick="Logout" class="logout-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                <polyline points="16 17 21 12 16 7"></polyline>
                <line x1="21" y1="12" x2="9" y2="12"></line>
            </svg>            Cerrar
        </button>
    </header>

    <main class="flex-grow p-4 flex flex-col items-center">
        <div class="w-full max-w-4xl space-y-8">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-bold">Gestión de Tarjetas de Acceso</h2>
                @*                 <button class="bg-yellow-600 hover:bg-yellow-700 text-white p-2 rounded" @onclick="() => isReturnModalOpen = true">
                    Devolver Tarjeta
                </button>
 *@            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="text-2xl font-bold text-center">Asignar Tarjeta de Acceso</h3>
                </div>
                <div class="card-content space-y-4">
                    <div class="space-y-2">
                        <label for="card-select">Seleccionar Tarjeta Provisional</label>
                        <select id="card-select" @bind="tarjProvId" class="w-full p-2 border rounded">
                            <option value="">Seleccione una tarjeta disponible</option>
                            @if(TarjProv != null)
                            {
                                @foreach (var card in TarjProv)
                                {
                                    <option value="@card.TarjProvId">@card.TarjProvCodigo</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="space-y-2">
                        <label>Tipo de Identificación</label>
                        <div class="flex space-x-4">
                            <label>
                                <input type="radio" name="idType" value="cedula" checked="@(idType == "cedula")" @onchange="@(e => idType = "cedula")" />
                                Cédula
                            </label>
                            <label>
                                <input type="radio" name="idType" value="pasaporte" checked="@(idType == "pasaporte")" @onchange="@(e => idType = "pasaporte")" />
                                Pasaporte
                            </label>
                        </div>
                    </div>

                    <div class="space-y-2">
                        <label for="id-number">@(idType == "cedula" ? "Cédula" : "Pasaporte")</label>
                        <InputText id="id-number"
                        type="text"
                        placeholder="@(idType == "cedula" ? "12312345671" : "Número de pasaporte")"
                        @bind-Value="TarjP.UsuDocIdentidad"
                        @oninput="FormatCedulaOnInput"
                        maxlength="@(idType == "cedula" ? 11 : null)"
                        class="w-full p-2 border rounded" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="floating-alert">
                            @errorMessage
                            <span class="floating-alert-close">&times;</span>
                        </div>
                    }
                    <button class="w-full bg-green-600 hover:bg-green-700 text-white p-2 rounded"
                    @onclick="HandleAssignCard">
                        Asignar Tarjeta
                    </button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3 class="text-xl font-bold">Lista de Tarjetas</h3>
                </div>
                <div class="card-content">
                    <div class="flex space-x-4 mb-4">
                        <div class="flex-1">
                            <InputText id="id-number"
                            type="text"
                            placeholder="Buscar por código o usuario..."
                            @bind-Value="searchTerm"
                            @oninput="OnSearchTermChanged"
                            maxLength="20"
                            class="w-full p-2 border rounded" />
                        </div>
                        <div class="w-48">
                            <select @onchange="FiltrarTarjProvPorEstado" class="w-full p-2 border rounded">
                                <option value="Todas">Todas</option>
                                <option value="3">Habilitada</option>
                                <option value="4">Deshabilitada</option>
                            </select>
                        </div>
                    </div>
                    <table class="w-full">
                        <thead>
                            <tr>
                                <th>Código Tarjeta</th>
                                <th>Usuario Asignado</th>
                                <th>Fecha Asignación</th>
                                <th>Fecha Expiración</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredTarjProv != null)
                            {
                                conteo = 0;
                                @foreach (var card in filteredTarjProv)
                                {
                                    @if (estadoNombres[conteo] == "Habilitado")
                                    {
                                        <tr class="@("bg-green-100")">
                                            <td>@(card.TarjProvCodigo?.ToString() ?? null)</td>
                                            <td>@(card.UsuId ?? null)</td>
                                            <td>@(card.TarjProvFecha?.ToString() ?? null)</td>
                                            <td>@(card.TarjProvFechaExpiracion?.ToString() ?? null)</td>
                                            <td>@(estadoNombres[card.TarjProvId - 1]?.ToString() ?? null)</td>
                                        </tr>
                                        conteo++;
                                    }
                                    @if(estadoNombres[conteo] == "Deshabilitado")
                                    {
                                        <tr class="@("bg-red-100")">
                                            <td>@(card.TarjProvCodigo?.ToString() ?? null)</td>
                                            <td>@(card.UsuId ?? null)</td>
                                            <td>@(card.TarjProvFecha?.ToString() ?? null)</td>
                                            <td>@(card.TarjProvFechaExpiracion?.ToString() ?? null)</td>
                                            <td>@(estadoNombres[card.TarjProvId - 1]?.ToString() ?? null)</td>
                                        </tr>
                                        conteo++;
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <footer class="bg-green-800 text-white text-center p-4 mt-8">
        <p>&copy; 2023 UNPHU - Plataforma de Acceso. Todos los derechos reservados.</p>
    </footer>
</div>

@* @if (isReturnModalOpen)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-4 rounded-lg max-w-md w-full">
            <h2 class="text-xl font-bold mb-4">Devolver Tarjeta</h2>
            <p class="mb-4">Ingrese el código de la tarjeta que desea devolver.</p>
            <div class="space-y-4">
                <div class="space-y-2">
                    <label for="return-card-code">Código de Tarjeta</label>
                    <input id="return-card-code"
                    type="text"
                    placeholder="Ej. PROV001"
                    @bind="returnCardCode"
                    class="w-full p-2 border rounded" />
                </div>
                <button class="w-full bg-yellow-600 hover:bg-yellow-700 text-white p-2 rounded"
                @onclick="HandleReturnCard"
                disabled="@string.IsNullOrEmpty(returnCardCode)">
                    Confirmar Devolución
                </button>
                <button class="w-full bg-gray-300 hover:bg-gray-400 text-gray-800 p-2 rounded"
                @onclick="() => isReturnModalOpen = false">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
 *@}

@code {
    private string errorMessage;
    private int tarjProvId;
    private int conteo = 0;
    private List<TarjetasProvisionale> TarjProv = new List<TarjetasProvisionale>();
    private VerificarCedulaDTO cedula = new VerificarCedulaDTO();
    private Usuario usuario = new Usuario();
    private UpdateTarjetaProv TarjP = new UpdateTarjetaProv();
    private List<TarjetasProvisionale> filteredTarjProv = new List<TarjetasProvisionale>();
    private List<string> estadoNombres = new List<string>();
    private List<string> usuariosNombres = new List<string>();
    private string idType = "cedula";
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            conteo = 0;
            TarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
            filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
            foreach (var card in filteredTarjProv)
            {
                var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                estadoNombres.Add(estadoNombre ?? "Desconocido");
            }
            foreach (var card in filteredTarjProv)
            {
                var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                usuariosNombres.Add(usuarioNombre ?? "Nombre");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading entities.";
            Console.WriteLine(ex.Message);
        }
    }

    // private string selectedCard = "";
    // private string idType = "cedula";
    // private string statusFilter = "all";
    // private bool isReturnModalOpen = false;
    // private string returnCardCode = "";
    // private string prueba;

    // Método que filtra las tarjetas según el término de búsqueda
    private async Task FilterTarjProv(string buscar)
    {
        conteo = 0;
        searchTerm = buscar;
        filteredTarjProv = filteredTarjProv
            .Where((card, index) =>
                card.TarjProvCodigo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || // Filtrar por código de tarjeta
                (usuariosNombres.Count > index && usuariosNombres[index].Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) // Filtrar por nombre de usuario
            )
            .ToList();
        usuariosNombres.Clear();
        foreach (var card in filteredTarjProv)
        {
            var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
            estadoNombres.Add(estadoNombre ?? "Desconocido");
        }
        foreach (var card in filteredTarjProv)
        {
            var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
            usuariosNombres.Add(usuarioNombre ?? "Nombre");
        }
    }

    // Se ejecuta cuando el usuario escribe en el input (y se actualiza searchTerm)
    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        FilterTarjProv(e.Value?.ToString()); // Llama al método para filtrar las tarjetas
    }

    private async Task FiltrarTarjProvPorEstado(ChangeEventArgs e)
    {
        var EstadoIdString = e.Value?.ToString();

        if (string.IsNullOrEmpty(EstadoIdString) || EstadoIdString == "Todas")
        {
            conteo = 0;
            filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
            estadoNombres.Clear();
            usuariosNombres.Clear();
            foreach (var card in filteredTarjProv)
            {
                var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                estadoNombres.Add(estadoNombre ?? "Desconocido");
            }
            foreach (var card in filteredTarjProv)
            {
                var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                usuariosNombres.Add(usuarioNombre ?? "Nombre");
            }
        }
        else
        {
            if (int.TryParse(EstadoIdString, out int statusId))
            {
                conteo = 0;
                filteredTarjProv = await tarjetasProvs.TarjProvPorEstado(statusId);
                estadoNombres.Clear();
                usuariosNombres.Clear();
                foreach (var card in filteredTarjProv)
                {
                    var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                    estadoNombres.Add(estadoNombre ?? "Desconocido");
                }
                foreach (var card in filteredTarjProv)
                {
                    var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                    usuariosNombres.Add(usuarioNombre ?? "Nombre");
                }
            }
            else
            {
                Console.WriteLine("Error: El valor del estado no es válido.");
                filteredTarjProv = new List<TarjetasProvisionale>();
            }
        }
    }

    private string FormatCedula(string value)
    {
        // Eliminar espacios y guiones del valor ingresado
        value = Regex.Replace(value, @"\s+", "").Replace("-", "");

        // Asegurarse de que el número tenga el formato correcto (11 dígitos)
        if (value.Length > 11)
        {
            value = value.Substring(0, 11); // Limitar la longitud a 11
        }

        // Formatear en el formato requerido 123-1234567-1
        if (value.Length <= 3)
            return value;
        else if (value.Length <= 10)
            return $"{value.Substring(0, 3)}{value.Substring(3)}";
        else
            return $"{value.Substring(0, 3)}-{value.Substring(3, 7)}-{value.Substring(10, 1)}";
    }

    private void FormatCedulaOnInput(ChangeEventArgs e)
    {
        // Obtener el valor ingresado
        string value = e.Value.ToString();
        if (idType == "cedula")
        {
            // Formatear la cédula mientras se escribe
            TarjP.UsuDocIdentidad = FormatCedula(value); // Aquí usamos FormatCedula
        }
        else
        {
            TarjP.UsuDocIdentidad = value;
        }
    }

    private async Task HandleAssignCard()
    {
        try
        {
            errorMessage = null;
            if (idType == "cedula")
            {
                var verificacionCedula = await tarjetasProvs.VerificarCedula(TarjP.UsuDocIdentidad);
                if (verificacionCedula == null)
                {
                    errorMessage = "An unexpected error occurred.";
                }
                else
                {
                    if (!verificacionCedula.Value)
                    {
                        string cedulaNoValida = "Cédula No Válida.";
                        errorMessage = cedulaNoValida;
                    }
                    else
                    {
                        usuario.StatusId = await tarjetasProvs.GetEstadoId(TarjP.UsuDocIdentidad);
                        if (usuario.StatusId == null)
                        {
                            errorMessage = "Cédula desconocida.";
                        }
                        else if (usuario.StatusId != 3)
                        {
                            errorMessage = "Usuario deshabilitado.";
                        }
                    }
                }
            }
            else
            {
            }
            if (errorMessage == null)
            {
                conteo = 0;
                var tarjProvCod = await tarjetasProvs.ActivarTarjetaProv(tarjProvId, TarjP);
                TarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                estadoNombres.Clear();
                usuariosNombres.Clear();
                foreach (var card in filteredTarjProv)
                {
                    var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                    estadoNombres.Add(estadoNombre ?? "Desconocido");
                }
                foreach (var card in filteredTarjProv)
                {
                    var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                    usuariosNombres.Add(usuarioNombre ?? "Nombre");
                }
            }
        }
        catch (ApplicationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred.";
            Console.WriteLine(ex.Message);
        }

    }

    private void HandleReturnCard()
    {
        // var card = provisionalCards.FirstOrDefault(c => c.code == returnCardCode && c.assigned);
        // if (card != null)
        // {
        //     card.assigned = false;
        //     card.user = null;
        //     card.assignedDate = null;
        //     card.expirationDate = null;

        //     isReturnModalOpen = false;
        //     returnCardCode = "";
        //     JSRuntime.InvokeVoidAsync("alert", "Tarjeta devuelta con éxito");
        // }
    }

    private void Logout()
    {
        localStorage.RemoveItemAsync("authToken");
        NavigationManager.NavigateTo("/");
    }
}
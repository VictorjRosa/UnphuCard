@page "/index"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject TarjetasProvs tarjetasProvs
@inject Estados estados
@inject Usuarios usuarios
@using UnphuCard_Api.Models
@using UnphuCard_Api.DTOS

<div class="assign-card-container">
    <header class="header">
        <h1>Plataforma de Acceso UNPHU</h1>
        <button @onclick="Logout" class="logout-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                <polyline points="16 17 21 12 16 7"></polyline>
                <line x1="21" y1="12" x2="9" y2="12"></line>
            </svg>
            Cerrar
        </button>
    </header>

    <main class="main-content">
        <div class="content-wrapper">
            <div class="title-section">
                <h2>Gestión de Tarjetas de Acceso</h2>
                <button class="button button-yellow" @onclick="() => isReturnModalOpen = true">
                    Devolver Tarjeta
                </button>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3>Asignar Tarjeta de Acceso</h3>
                </div>
                <div class="card-content">
                    <div class="form-group">
                        <label for="card-select">Seleccionar Tarjeta Provisional</label>
                        <select id="card-select" @bind="tarjProvId">
                            <option value="">Seleccione una tarjeta disponible</option>
                            @if (TarjProv != null)
                            {
                                @foreach (var card in TarjProv)
                                {
                                    <option value="@card.TarjProvId">@card.TarjProvCodigo</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Tipo de Identificación</label>
                        <div class="radio-group">
                            <label>
                                <input type="radio" name="idType" value="cedula" checked="@(idType == "cedula")" @onchange="@(e => idType = "cedula")" />
                                Cédula
                            </label>
                            <label>
                                <input type="radio" name="idType" value="pasaporte" checked="@(idType == "pasaporte")" @onchange="@(e => idType = "pasaporte")" />
                                Pasaporte
                            </label>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="id-number">@(idType == "cedula" ? "Cédula" : "Pasaporte")</label>
                        <InputText id="id-number"
                        type="text"
                        placeholder="@(idType == "cedula" ? "12312345671" : "Número de pasaporte")"
                        @bind-Value="TarjPAssign.UsuDocIdentidad"
                        @oninput="FormatCedulaOnInput"
                        maxlength="@(idType == "cedula" ? 11 : null)" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessageAssign))
                    {
                        <div class="floating-alert">
                            @errorMessageAssign
                            <span class="floating-alert-close">&times;</span>
                        </div>
                    }
                    <button class="button button-green" @onclick="HandleAssignCard">
                        Asignar Tarjeta
                    </button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3>Lista de Tarjetas</h3>
                </div>
                <div class="card-content">
                    <div class="search-filter">
                        <select @onchange="FiltrarTarjProvPorEstado">
                            <option value="Todas">Todas</option>
                            <option value="3">Habilitada</option>
                            <option value="4">Deshabilitada</option>
                        </select>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Código Tarjeta</th>
                                <th>Usuario Asignado</th>
                                <th>Fecha Asignación</th>
                                <th>Fecha Expiración</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredTarjProv != null)
                            {
                                conteo = 0;
                                @foreach (var card in filteredTarjProv)
                                {
                                    if (conteo < estadoNombres.Count && conteo < usuariosNombres.Count)
                                    {
                                        @if (estadoNombres[conteo] == "Habilitado")
                                        {
                                            <tr class="enabled">
                                                <td>@(card.TarjProvCodigo?.ToString() ?? null)</td>
                                                <td>@(usuariosNombres[conteo]?.ToString() ?? "No asignado")</td>
                                                <td>@(card.TarjProvFecha?.ToString() ?? "N/A")</td>
                                                <td>@(card.TarjProvFechaExpiracion?.ToString() ?? "N/A")</td>
                                                <td>@(estadoNombres[conteo]?.ToString() ?? null)</td>
                                            </tr>
                                            conteo++;
                                        }
                                        else if (estadoNombres[conteo] == "Deshabilitado")
                                        {
                                            <tr class="disabled">
                                                <td>@(card.TarjProvCodigo?.ToString() ?? null)</td>
                                                <td>@(usuariosNombres[conteo]?.ToString() ?? "No asignado")</td>
                                                <td>@(card.TarjProvFecha?.ToString() ?? "N/A")</td>
                                                <td>@(card.TarjProvFechaExpiracion?.ToString() ?? "N/A")</td>
                                                <td>@(estadoNombres[conteo]?.ToString() ?? null)</td>
                                            </tr>
                                            conteo++;
                                        }
                                        else
                                        {
                                            conteo++;
                                        }
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <p>&copy; 2023 UNPHU - Plataforma de Acceso. Todos los derechos reservados.</p>
    </footer>
</div>

@if (ShowAssignSuccessModal) // Modal de asignación exitosa
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2>Asignación Exitosa</h2>
            <p>La tarjeta se ha asignado correctamente.</p>
            <button class="button button-green" @onclick="CloseAssignSuccessModal">Cerrar</button>
        </div>
    </div>
}

@if (ShowReturnSuccessModal) // Modal de asignación exitosa
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2>Retorno Exitoso</h2>
            <p>Tarjeta devuelta con éxito.</p>
            <button class="button button-green" @onclick="CloseReturnSuccessModal">Cerrar</button>
        </div>
    </div>
}

@if (isReturnModalOpen)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2>Devolver Tarjeta</h2>
            <p>Ingrese la cédula.</p>
            <div class="form-group">
                <label for="return-card-code">@(idType == "cedula" ? "Cédula" : "Pasaporte")</label>
                <InputText id="return-card-code"
                type="text"
                placeholder="@(idType == "cedula" ? "12312345671" : "Número de pasaporte")"
                @bind-Value="TarjPReturn.UsuDocIdentidad"
                @oninput="FormatCedulaOnInput" />
            </div>
            @if (!string.IsNullOrEmpty(errorMessageReturn))
            {
                <div class="floating-alert">
                    @errorMessageReturn
                    <span class="floating-alert-close">&times;</span>
                </div>
            }
            <button class="button button-yellow" @onclick="HandleReturnCard">
                Confirmar Devolución
            </button>
            <button class="button button-gray" @onclick="() => isReturnModalOpen = false">
                Cancelar
            </button>
        </div>
    </div>
}

@code {
    private string errorMessageAssign;
    private string errorMessageReturn;
    private int tarjProvId;
    private int conteo = 0;
    private List<TarjetasProvisionale> TarjProv = new List<TarjetasProvisionale>();
    private VerificarCedulaDTO cedula = new VerificarCedulaDTO();
    private Usuario usuario = new Usuario();
    private UpdateTarjetaProv TarjPAssign = new UpdateTarjetaProv();
    private UpdateTarjetaProv TarjPReturn = new UpdateTarjetaProv();
    private List<TarjetasProvisionale> filteredTarjProv = new List<TarjetasProvisionale>();
    private List<string> estadoNombres = new List<string>();
    private List<string> usuariosNombres = new List<string>();
    private string idType = "cedula";
    private string searchTerm = "";
    private bool isReturnModalOpen = false;
    private bool ShowAssignSuccessModal = false;
    private bool ShowReturnSuccessModal = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            conteo = 0;
            TarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
            filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
            foreach (var card in filteredTarjProv)
            {
                var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                estadoNombres.Add(estadoNombre ?? "Desconocido");
            }
            foreach (var card in filteredTarjProv)
            {
                var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                usuariosNombres.Add(usuarioNombre ?? "No asignado");
            }
        }
        catch (Exception ex)
        {
            errorMessageAssign = "An error occurred while loading entities.";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task FiltrarTarjProvPorEstado(ChangeEventArgs e)
    {
        var EstadoIdString = e.Value?.ToString();

        if (string.IsNullOrEmpty(EstadoIdString) || EstadoIdString == "Todas")
        {
            conteo = 0;
            filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
            estadoNombres.Clear();
            usuariosNombres.Clear();
            foreach (var card in filteredTarjProv)
            {
                var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                estadoNombres.Add(estadoNombre ?? "Desconocido");
            }
            foreach (var card in filteredTarjProv)
            {
                var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                usuariosNombres.Add(usuarioNombre ?? "No asignado");
            }
        }
        else
        {
            if (int.TryParse(EstadoIdString, out int statusId))
            {
                conteo = 0;
                filteredTarjProv = await tarjetasProvs.TarjProvPorEstado(statusId);
                estadoNombres.Clear();
                usuariosNombres.Clear();
                foreach (var card in filteredTarjProv)
                {
                    var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                    estadoNombres.Add(estadoNombre ?? "Desconocido");
                }
                foreach (var card in filteredTarjProv)
                {
                    var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                    usuariosNombres.Add(usuarioNombre ?? "No asignado");
                }
            }
            else
            {
                Console.WriteLine("Error: El valor del estado no es válido.");
                filteredTarjProv = new List<TarjetasProvisionale>();
            }
        }
    }

    private string FormatCedula(string value)
    {
        // Eliminar espacios y guiones del valor ingresado
        value = Regex.Replace(value, @"\s+", "").Replace("-", "");

        // Asegurarse de que el número tenga el formato correcto (11 dígitos)
        if (value.Length > 11)
        {
            value = value.Substring(0, 11); // Limitar la longitud a 11
        }

        // Formatear en el formato requerido 123-1234567-1
        if (value.Length <= 3)
            return value;
        else if (value.Length <= 10)
            return $"{value.Substring(0, 3)}{value.Substring(3)}";
        else
            return $"{value.Substring(0, 3)}-{value.Substring(3, 7)}-{value.Substring(10, 1)}";
    }

    private void FormatCedulaOnInput(ChangeEventArgs e)
    {
        // Obtener el valor ingresado
        string value = e.Value.ToString();
        if (isReturnModalOpen)
        {
            if (idType == "cedula")
            {
                // Formatear la cédula mientras se escribe
                TarjPReturn.UsuDocIdentidad = FormatCedula(value); // Aquí usamos FormatCedula
            }
            else
            {
                TarjPReturn.UsuDocIdentidad = value;
            }
        }else
        {
            if (idType == "cedula")
            {
                // Formatear la cédula mientras se escribe
                TarjPAssign.UsuDocIdentidad = FormatCedula(value); // Aquí usamos FormatCedula
            }
            else
            {
                TarjPAssign.UsuDocIdentidad = value;
            }
        }
    }

    private async Task HandleAssignCard()
    {
        try
        {
            errorMessageAssign = null;
            if (idType == "cedula")
            {
                var verificacionCedula = await tarjetasProvs.VerificarCedula(TarjPAssign.UsuDocIdentidad);
                if (verificacionCedula == null)
                {
                    errorMessageAssign = "An unexpected error occurred.";
                }
                else
                {
                    if (!verificacionCedula.Value)
                    {
                        string cedulaNoValida = "Cédula No Válida.";
                        errorMessageAssign = cedulaNoValida;
                    }
                    else
                    {
                        usuario.StatusId = await tarjetasProvs.GetEstadoId(TarjPAssign.UsuDocIdentidad);
                        if (usuario.StatusId == null)
                        {
                            errorMessageAssign = "Cédula desconocida.";
                        }
                        else if (usuario.StatusId != 3)
                        {
                            errorMessageAssign = "Usuario deshabilitado.";
                        }
                    }
                }
            }
            else
            {
                if (errorMessageAssign == null)
                {
                    conteo = 0;
                    var tarjProvCod = await tarjetasProvs.ActivarTarjetaProv(tarjProvId, TarjPAssign);
                    TarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                    filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                    estadoNombres.Clear();
                    usuariosNombres.Clear();
                    foreach (var card in filteredTarjProv)
                    {
                        var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                        estadoNombres.Add(estadoNombre ?? "Desconocido");
                    }
                    foreach (var card in filteredTarjProv)
                    {
                        var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                        usuariosNombres.Add(usuarioNombre ?? "No asignado");
                    }
                    TarjPAssign.UsuDocIdentidad = "";
                    ShowAssignSuccessModal = true;
                }
            }
            if (errorMessageAssign == null)
            {
                conteo = 0;
                var tarjProvCod = await tarjetasProvs.ActivarTarjetaProv(tarjProvId, TarjPAssign);
                TarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                estadoNombres.Clear();
                usuariosNombres.Clear();
                foreach (var card in filteredTarjProv)
                {
                    var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                    estadoNombres.Add(estadoNombre ?? "Desconocido");
                }
                foreach (var card in filteredTarjProv)
                {
                    var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                    usuariosNombres.Add(usuarioNombre ?? "No asignado");
                }
                TarjPAssign.UsuDocIdentidad = "";
                ShowAssignSuccessModal = true;
            }
        }
        catch (ApplicationException ex)
        {
            errorMessageAssign = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessageAssign = "An unexpected error occurred.";
            Console.WriteLine(ex.Message);
        }

    }
    
    protected void CloseAssignSuccessModal()
    {
        ShowAssignSuccessModal = false;
    }

    protected void CloseReturnSuccessModal()
    {
        ShowReturnSuccessModal = false;
    }

    private async Task HandleReturnCard()
    {
        try
        {
            errorMessageReturn = null;
            if (idType == "cedula")
            {
                var verificacionCedula = await tarjetasProvs.VerificarCedula(TarjPReturn.UsuDocIdentidad);
                if (verificacionCedula == null)
                {
                    errorMessageReturn = "An unexpected error occurred.";
                }
                else
                {
                    if (!verificacionCedula.Value)
                    {
                        string cedulaNoValida = "Cédula No Válida.";
                        errorMessageReturn = cedulaNoValida;
                    }
                    else
                    {
                        usuario.StatusId = await tarjetasProvs.GetEstadoId(TarjPReturn.UsuDocIdentidad);
                        if (usuario.StatusId == null)
                        {
                            errorMessageReturn = "Cédula desconocida.";
                        }
                        else if (usuario.StatusId != 3)
                        {
                            errorMessageReturn = "Usuario deshabilitado.";
                        }
                    }
                }
            }
            else
            {
                if (errorMessageReturn == null)
                {
                    conteo = 0;
                    var tarjProvCod = await tarjetasProvs.DesactivarTarjetaProv(tarjProvId);
                    TarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                    filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                    estadoNombres.Clear();
                    usuariosNombres.Clear();
                    foreach (var card in filteredTarjProv)
                    {
                        var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                        estadoNombres.Add(estadoNombre ?? "Desconocido");
                    }
                    foreach (var card in filteredTarjProv)
                    {
                        var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                        usuariosNombres.Add(usuarioNombre ?? "No asignado");
                    }
                    ShowReturnSuccessModal = true;
                    TarjPReturn.UsuDocIdentidad = "";
                    isReturnModalOpen = false;
                }
            }
            if (errorMessageReturn == null)
            {
                conteo = 0;
                var tarjProvCod = await tarjetasProvs.DesactivarTarjetaProv(tarjProvId);
                TarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                filteredTarjProv = await tarjetasProvs.GetTarjetasProvsAsync();
                estadoNombres.Clear();
                usuariosNombres.Clear();
                foreach (var card in filteredTarjProv)
                {
                    var estadoNombre = await estados.GetEstadosAsync(card.StatusId ?? 0);
                    estadoNombres.Add(estadoNombre ?? "Desconocido");
                }
                foreach (var card in filteredTarjProv)
                {
                    var usuarioNombre = await usuarios.GetUsuariosNombresAsync(card.UsuId ?? 0);
                    usuariosNombres.Add(usuarioNombre ?? "No asignado");
                }
                ShowReturnSuccessModal = true;
                TarjPReturn.UsuDocIdentidad = "";
                isReturnModalOpen = false;
            }
        }
        catch (ApplicationException ex)
        {
            errorMessageReturn = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessageReturn = "An unexpected error occurred.";
            Console.WriteLine(ex.Message);
        }
    }

    private void Logout()
    {
        localStorage.RemoveItemAsync("authToken");
        NavigationManager.NavigateTo("/");
    }
}
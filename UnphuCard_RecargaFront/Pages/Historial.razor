@page "/historial"
@using UnphuCard_Api.Models
@inject NavigationManager NavigationManager
@inject HistorialRecarga historialRecarga
@inject AuthService authService

<div class="min-h-screen bg-gray-100 flex flex-col">
    <main class="flex-1 container mx-auto px-4 py-6">
        <button class="mb-4 text-green-600 hover:text-green-700" @onclick="GoBack">
            <span class="mr-2">←</span> Volver al dashboard
        </button>

        <div class="bg-white rounded-lg shadow-md w-full">
            <div class="flex flex-row items-center justify-between p-6 border-b">
                <h2 class="text-2xl font-bold text-gray-800">Historial de Recargas</h2>
                <div class="flex space-x-2">
                    <select @onchange="FilterTransactions" class="w-[180px] border rounded-md">
                        <option value="all">Todos los métodos</option>
                        <option value="Efectivo">Efectivo</option>
                        <option value="Tarjeta de Crédito o Débito">Tarjeta de Crédito/Débito</option>
                        <option value="PayPal">PayPal</option>
                    </select>
                    <input type="date" @bind="SelectedDate" class="w-[180px] border rounded-md" />
                    <button @onclick="FiltroFecha" class="px-4 py-2 border rounded-md flex items-center">
                        <span class="mr-2"></span> Buscar
                    </button>
@*                     <button @onclick="OpenExportDialog" class="px-4 py-2 border rounded-md flex items-center">
                        <span class="mr-2">↓</span> Exportar
                    </button>
 *@                </div>
            </div>
            <div class="p-6">
                <table class="w-full">
                    <thead>
                        <tr>
                            <th class="text-left">Fecha</th>
                            <th class="text-left">Descripción</th>
                            <th class="text-left">Método de pago</th>
                            <th class="text-right">Monto</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!IsFiltered)
                        {
                            if (SelectedDate == CambiarDate)
                            {
                                @foreach (var transaction in AllTransactions)
                                {
                                    <tr>
                                        <td>@FormatDate(transaction.Fecha ?? DateTime.Today)</td>
                                        <td>Recarga tarjeta</td>
                                        <td>@transaction.MétodoDePago</td>
                                        <td class="text-right font-medium">@FormatAmount(transaction.Monto ?? 0)</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var transaction in FilteredTransactions)
                                {
                                    <tr>
                                        <td>@FormatDate(transaction.Fecha ?? DateTime.Today)</td>
                                        <td>Recarga tarjeta</td>
                                        <td>@transaction.MétodoDePago</td>
                                        <td class="text-right font-medium">@FormatAmount(transaction.Monto ?? 0)</td>
                                    </tr>
                                }
                            }
                        }
                        else
                        {
                            @foreach (var transaction in FilteredTransactions)
                            {
                                <tr>
                                    <td>@FormatDate(transaction.Fecha ?? DateTime.Today)</td>
                                    <td>Recarga tarjeta</td>
                                    <td>@transaction.MétodoDePago</td>
                                    <td class="text-right font-medium">@FormatAmount(transaction.Monto ?? 0)</td>
                                </tr>
                            }
                            IsFiltered = false;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </main>
</div>

@* 
@if (IsExportDialogOpen)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg">
            <h3 class="text-lg font-semibold mb-4">Exportar transacciones</h3>
            <div class="grid gap-4">
                <div class="grid grid-cols-2 gap-4">
                    <input type="date" @bind="ExportStartDate" placeholder="Fecha inicial" class="border rounded-md p-2" />
                    <input type="date" @bind="ExportEndDate" placeholder="Fecha final" class="border rounded-md p-2" />
                </div>
                <button @onclick="CloseExportDialog" class="bg-green-600 text-white px-4 py-2 rounded-md">Exportar</button>
                <button @onclick="CloseExportDialog" class="border px-4 py-2 rounded-md">Cancelar</button>
            </div>
        </div>
    </div>
}
*@

@code {


    private List<VwRecarga> AllTransactions { get; set; } = new List<VwRecarga>();
    private List<VwRecarga> FilteredTransactions { get; set; } = new List<VwRecarga>();
    private DateTime? SelectedDate { get; set; }
    private DateTime? CambiarDate { get; set; }
    // private DateTime? ExportStartDate { get; set; }
    // private DateTime? ExportEndDate { get; set; }
    // private bool IsExportDialogOpen { get; set; } = false;
    private bool IsFiltered { get; set; } = false;
    private string metodoSeleccionado { get; set; } = "all";

    protected override async Task OnInitializedAsync()
    {
        var userId = await authService.GetUserIdFromTokenAsync();
        AllTransactions = await historialRecarga.GetHistorialRecargaAsync(userId);
    }

    private async Task FilterTransactions(ChangeEventArgs e)
    {
        var selectedMethod = e.Value?.ToString();
        metodoSeleccionado = selectedMethod;
        CambiarDate = SelectedDate;
        var userId = await authService.GetUserIdFromTokenAsync();
        if (SelectedDate.HasValue)
        {
            if (string.IsNullOrEmpty(selectedMethod) || selectedMethod == "all")
            {
                FilteredTransactions = AllTransactions
                    .Where(t => t.Fecha.HasValue && t.Fecha.Value.Date == SelectedDate.Value.Date)
                    .ToList();
                IsFiltered = true;
            }
            else
            {
                if (selectedMethod != null)
                {
                    FilteredTransactions = AllTransactions
                    .Where(t => t.Fecha.HasValue && t.Fecha.Value.Date == SelectedDate.Value.Date && t.MétodoDePago == selectedMethod && t.IdDelUsuario == userId)
                    .ToList();
                    IsFiltered = true;
                }
                else
                {
                    Console.WriteLine("Error: El valor del método de pago no es válido.");
                    FilteredTransactions = new List<VwRecarga>();
                }
            }
        }
        else
        {
            if (string.IsNullOrEmpty(selectedMethod) || selectedMethod == "all")
            {
                AllTransactions = await historialRecarga.GetHistorialRecargaAsync(userId);
                IsFiltered = false;
            }
            else
            {
                if (selectedMethod != null)
                {
                    FilteredTransactions = AllTransactions
                    .Where(t => t.MétodoDePago == selectedMethod && t.IdDelUsuario == userId)
                    .ToList();
                    IsFiltered = true;
                }
                else
                {
                    Console.WriteLine("Error: El valor del método de pago no es válido.");
                    FilteredTransactions = new List<VwRecarga>();
                }
            }
        }
    }

    private async Task FiltroFecha()
    {
        var userId = await authService.GetUserIdFromTokenAsync();
        CambiarDate = SelectedDate;
        if (SelectedDate.HasValue)
        {
            if (string.IsNullOrEmpty(metodoSeleccionado) || metodoSeleccionado == "all")
            {
                FilteredTransactions = AllTransactions
                    .Where(t => t.Fecha.HasValue && t.Fecha.Value.Date == SelectedDate.Value.Date)
                    .ToList();
                IsFiltered = true;
            }
            else
            {
                if (metodoSeleccionado != null)
                {
                    FilteredTransactions = AllTransactions
                    .Where(t => t.Fecha.HasValue && t.Fecha.Value.Date == SelectedDate.Value.Date && t.MétodoDePago == metodoSeleccionado && t.IdDelUsuario == userId)
                    .ToList();
                    IsFiltered = true;
                }
                else
                {
                    Console.WriteLine("Error: El valor del método de pago no es válido.");
                    FilteredTransactions = new List<VwRecarga>();
                }
            }
        }
        else
        {
            if (string.IsNullOrEmpty(metodoSeleccionado) || metodoSeleccionado == "all")
            {
                AllTransactions = await historialRecarga.GetHistorialRecargaAsync(userId);
                IsFiltered = false;
            }
            else
            {
                if (metodoSeleccionado != null)
                {
                    FilteredTransactions = AllTransactions
                    .Where(t => t.MétodoDePago == metodoSeleccionado && t.IdDelUsuario == userId)
                    .ToList();
                    IsFiltered = true;
                }
                else
                {
                    Console.WriteLine("Error: El valor del método de pago no es válido.");
                    FilteredTransactions = new List<VwRecarga>();
                }
            }
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/index");
    }

    // private void OpenExportDialog()
    // {
    //     IsExportDialogOpen = true;
    // }

    // private void CloseExportDialog()
    // {
    //     IsExportDialogOpen = false;
    // }

    // private void HandleExport()
    // {
    //     if (ExportStartDate.HasValue && ExportEndDate.HasValue)
    //     {
    //         var filteredTransactions = Transactions.Where(t =>
    //             t.Date >= ExportStartDate.Value && t.Date <= ExportEndDate.Value).ToList();
    //         Console.WriteLine($"Exporting {filteredTransactions.Count} transactions");
    //         // Here you would implement the actual export logic
    //     }
    //     CloseExportDialog();
    // }

    private string FormatDate(DateTime date)
    {
        return date.ToString("d MMMM yyyy", new System.Globalization.CultureInfo("es-ES"));
    }

    private string FormatAmount(decimal amount)
    {
        return amount.ToString("C", new System.Globalization.CultureInfo("es-DO"));
    }
}

@page "/"
@using System.ComponentModel.DataAnnotations
@using UnphuCard_Api.DTOS
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@layout SecondaryLayout

<div class="login-container">
    <div class="left-panel wave-animation">
        <h6 class="main-title">RECARGA UNPHUCARD</h6>
    </div>
    <div class="right-panel">
        <div class="form-container">
            <img src="../css/Archivos/Logo Recarga.svg" alt="UNPHU Logo" class="logo">
            <h2 class="form-title">Iniciar sesión</h2>
            <EditForm Model="LoginModel">
                <DataAnnotationsValidator />
                <Validaciones TModel="LoginModel" />
                <div style="position: relative;">
                    <label for="email" class="form-label">Usuario</label>
                    <div class="icon-container">
                        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                        </svg>
                    </div>
                    <InputText type="text" id="email" class="form-input" @bind-Value="LoginModel.Usuario" required />
                </div>
                <div style="position: relative;">
                    <label for="password" class="form-label">Contraseña</label>
                    <div class="icon-container">
                        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                        </svg>
                    </div>
                    <InputText type="password" id="password" class="form-input" @bind-Value="LoginModel.Contraseña" required />
                </div>

                <button @onclick="HandleLogin" type="button" class="form-button">Iniciar sesión</button>
            </EditForm>
            <div style="text-align: center; margin-top: 1rem;">
                <a href="#" class="forgot-password">¿Olvidaste tu contraseña?</a>
            </div>            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
        </div>
    </div>
</div>

@if (showVerificationModal)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3 class="modal-title">Verificación de dos factores</h3>
            <p class="modal-description">Por favor, ingrese el código de verificación enviado a su correo electrónico.</p>

            <input type="text"
                   class="verification-input"
                   @bind="verificationCode"
                   @bind:event="oninput"
                   placeholder="Código de verificación"
                   maxlength="6"
                   pattern="[0-9]*"
                   inputmode="numeric"
                   @onkeypress="HandleKeyPress" />

            <button class="verify-button"
                    @onclick="HandleVerification"
                    disabled="@(!IsValidVerificationCode())">
                @if (isVerifying)
                {
                    <span class="spinner"></span>
                }
                else
                {
                    <span>Verificar</span>
                }
            </button>

            @if (!string.IsNullOrEmpty(errorMessageVerificacion))
            {
                <div class="error-message">
                    <span class="error-icon">⚠️</span>
                    @errorMessageVerificacion
                </div>
            }
        </div>
    </div>
}
@code {
    private bool isAuthenticated;
    private bool showVerificationModal = false;
    private string errorMessage;
    private string errorMessageVerificacion;
    private LoginModel LoginModel = new LoginModel();
    private bool showPassword = false;
    private int rolId;
    private string verificationCode;
    private string authToken;
    private bool isVerifying = false;

    private bool IsValidVerificationCode()
    {
        return !string.IsNullOrWhiteSpace(verificationCode) &&
               verificationCode.Length == 6 &&
               verificationCode.All(char.IsDigit);
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && IsValidVerificationCode())
        {
            HandleVerification();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var token = await localStorage.GetItemAsync<string>("authToken");
                isAuthenticated = !string.IsNullOrEmpty(token);
                rolId = await localStorage.GetItemAsync<int>("rolId");
                var salio = await localStorage.GetItemAsync<int>("salio");
                if (rolId == 1 && salio == 1)
                {
                    if (isAuthenticated)
                    {
                        NavigationManager.NavigateTo("/index");
                    }
                }
                else if (rolId == 3)
                {
                    if (isAuthenticated)
                    {
                        NavigationManager.NavigateTo("/IndexCajero");
                    }
                }
            }
        }
        catch (ApplicationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred.";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            errorMessage = null;
            rolId = await AuthService.Login(LoginModel);
            authToken = await localStorage.GetItemAsync<string>("authToken");
            await localStorage.SetItemAsync("rolId", rolId);

            if (rolId == 1)
            {
                showVerificationModal = true;
            }
            else if (rolId == 3)
            {
                await CompleteLogin();
            }

        }
        catch (ApplicationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred.";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleVerification()
    {
        try
        {
            var isVerified = await AuthService.VerifyCode(verificationCode);
            if (isVerified)
            {
                await CompleteLogin();
            }
            else
            {
                errorMessageVerificacion = "Código de verificación incorrecto. Por favor, intente nuevamente.";
            }
        }
        catch (Exception ex)
        {
            errorMessageVerificacion = "Error al verificar el código. Por favor, intente nuevamente.";
            Console.WriteLine(ex.Message);
        }
    }

    private async Task CompleteLogin()
    {
        await localStorage.SetItemAsync("authToken", authToken);
        if (rolId == 1)
        {
            NavigationManager.NavigateTo("/index");
        }
        else if (rolId == 3)
        {
            NavigationManager.NavigateTo("/IndexCajero");
        }
    }
}

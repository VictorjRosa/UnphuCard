@page "/recarga"
@inject NavigationManager NavigationManager
@inject Pago pago
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using UnphuCard_Api.Models
@using UnphuCard_Api.DTOS
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sesionStorage
@inject UsuarioService usuarioService



<div class="min-h-screen bg-gray-100 flex flex-col">    
    <main class="flex-1 container mx-auto px-4 py-6">
        <button class="mb-4 text-green-600 hover:text-green-700" @onclick="GoBack">
            <span class="mr-2">←</span> Volver
        </button>

        <div class="card w-full max-w-md mx-auto">
            <div class="card-header">
                <h2 class="card-title text-2xl font-bold text-gray-800">Recargar UNPHUCard</h2>
                <p class="card-description">Selecciona un monto rápido o ingresa uno personalizado</p>
            </div>
            <div class="card-content space-y-4">
                <div class="grid grid-cols-3 gap-4 mb-4">
                    @foreach (var quickAmount in QuickAmounts)
                    {
                        <button class="button-outline w-full" @onclick="() => SetAmount(quickAmount)">
                            RD$ @quickAmount
                        </button>
                    }
                </div>
                <div class="space-y-2">
                    <label for="amount">Monto personalizado</label>
                    <input id="amount" type="number" placeholder="0.00" @bind="Amount" class="input border-gray-300" />
                </div>

                <div class="space-y-2">
                    <label>Método de pago</label>
                    <div class="radio-group">
                        <InputRadioGroup @bind-Value="PaymentMethod" name="metodoPago">

                            @if (rolId == 1)
                            {
                                @foreach (var metodo in MetodosPago)
                                {
                                    if (@metodo.MetPagId != 1 && @metodo.MetPagId != 2)
                                    {
                                        <div class="flex items-center space-x-2">
                                            <InputRadio TValue="int" value="@metodo.MetPagId" id="@metodo.MetPagId" />
                                            <label for="@metodo.MetPagId">@metodo.MetPagDescripcion</label>
                                        </div>
                                    }
                                }
                            }
                            else
                            {
                                @foreach (var metodo in MetodosPago)
                                {
                                    if (@metodo.MetPagId != 1 && @metodo.MetPagId != 5)
                                    {
                                        <div class="flex items-center space-x-2">
                                            <InputRadio TValue="int" value="@metodo.MetPagId" id="@metodo.MetPagId" />
                                            <label for="@metodo.MetPagId">@metodo.MetPagDescripcion</label>
                                        </div>
                                    }
                                }
                            }
                        </InputRadioGroup>

                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="button w-full bg-green-600 hover:bg-green-700 text-white" @onclick="GoContinuar">
                    <span class="mr-2">💳</span> Continuar
                </button>
            </div>
        </div>
    </main>
</div>

@if (modalPago)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3 class="modal-title">Pago Exitoso</h3>
            <p class="modal-description">El pago ha sido realizado con éxito. ¡Gracias por su compra!</p>
            <button @onclick="ClosePagoExitosoModal" class="modal-button">Cerrar</button>
        </div>
    </div>
}

@code {

    private int PaymentMethod { get; set; }
    private decimal Amount { get; set; }
    private List<int> QuickAmounts { get; set; } = new List<int> { 100, 200, 300, 500 };
    private List<MetodoPago> MetodosPago { get; set; } = new List<MetodoPago>();
    private int rolId;
    private int usuId;
    private string usuMatricula;
    private bool modalPago = false;
    private PagoRequest paymentRequest = new PagoRequest();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            MetodosPago = new List<MetodoPago>();
            MetodosPago = await Http.GetFromJsonAsync<List<MetodoPago>>("api/MostrarMetodoPago"); 
            rolId = await localStorage.GetItemAsync<int>("rolId");
            usuMatricula = await sesionStorage.GetItemAsync<string>("usuMatricula");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los métodos de pago: {ex.Message}");
        }

    }


    private async Task StorePaymentMethodAndAmount()
    {
        if (PaymentMethod > 0)
        {
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "paymentMethod", PaymentMethod.ToString());
        }

        if (Amount > 0)
        {
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "amount", Amount.ToString());
        }
    }

    private void SetAmount(decimal amount)
    {
        Amount = amount;
    }


    private async Task GoBack()
    {
        rolId = await localStorage.GetItemAsync<int>("rolId");

        if (rolId == 1)
        {
            NavigationManager.NavigateTo("/index");
        }
        else
        {
            NavigationManager.NavigateTo("/IndexCajero");
        }
    }
    private async Task GoContinuar()
    {

        if (PaymentMethod <= 0 || Amount <= 0)
        {
            Console.WriteLine("Por favor, seleccione un monto y un método de pago.");
            return;
        }
        await StorePaymentMethodAndAmount();
        rolId = await localStorage.GetItemAsync<int>("rolId");
        if (rolId == 1)
        {
            NavigationManager.NavigateTo("/pago");
        }
        if (PaymentMethod == 2)  // Si el pago es en efectivo
        {
            await ProcesarPago();
            modalPago = true;  // Mostrar el modal de pago exitoso
        }
        else if (PaymentMethod == 3)  // Si el pago es con tarjeta
        {
            // Lógica para pago con tarjeta (en espera)
            // Después, se podría cambiar el estado del modal a pago exitoso después de un proceso adicional
            modalPago = true;
        }
    }

    private async Task ProcesarPago()
    {
        try
        {
            if (PaymentMethod != 0)
            {
                paymentRequest.MetodoPago = PaymentMethod;
            }
            usuId = await usuarioService.GetUsuIdByMatriculaAsync(usuMatricula);
            if (usuId != 0)
            {
                paymentRequest.UsuarioId = usuId;
            }
            if (Amount != 0)
            {
                paymentRequest.Amount = Amount;
            }
            
            await pago.PagoRequest(paymentRequest);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al procesar el pago: {ex.Message}");
        }
    }

    private void ClosePagoExitosoModal()
    {
        modalPago = false;
        NavigationManager.NavigateTo("/indexCajero");  // Redirigir después de cerrar el modal
    }
}


@page "/IndexCajero"
@inject NavigationManager NavigationManager
@inject UsuarioService usuarioService
@inject Blazored.SessionStorage.ISessionStorageService sesionStorage

<div class="cashier-page">
    <main class="main-content">
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">Ingreso de Información del Estudiante</h2>
            </div>
            <div class="card-content">
                <form @onsubmit="HandleSubmit">
                    <div class="form-group">
                        <label for="matricula">Matrícula del Estudiante:</label>
                        <InputText id="matricula"
                        type="text"
                        @bind-Value="matricula"
                        @oninput="FormatMatricula"
                        placeholder="12-3456"
                        maxlength="7" />
                        <button type="button" @onclick="ComprobarMatricula" class="check-button">
                            Comprobar
                        </button>
                        <p class="input-hint">Formato: 12-3456</p>
                        <p>@nombreCompleto</p>
                    </div>
                </form>
            </div>
            <div class="card-footer">
                <button class="submit-button"
                @onclick="HandleSubmit"
                disabled="@isSubmitDisabled">
                    Continuar
                </button>
            </div>
        </div>
    </main>
</div>

@if (showErrorModal)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">
                    <svg xmlns="http://www.w3.org/2000/svg" class="error-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="12" y1="8" x2="12" y2="12"></line>
                        <line x1="12" y1="16" x2="12.01" y2="16"></line>
                    </svg>
                    Error
                </h3>
            </div>
            <div class="modal-body">
                <p>Por favor, ingrese una matrícula válida.</p>
            </div>
            <div class="modal-footer">
                <button @onclick="CloseErrorModal" class="close-button">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string matricula = "";
    private string nombreCompleto = "";
    private bool showErrorModal = false;
    private bool isSubmitDisabled = true;

    private void FormatMatricula(ChangeEventArgs e)
    {
        nombreCompleto = "";
        string value = e.Value.ToString();
        matricula = FormatMatriculaValue(value ?? "");
    }

    private string FormatMatriculaValue(string value)
    {
        var cleaned = new string(value.Where(char.IsDigit).ToArray());
        if (cleaned.Length == 6)
        {
            return $"{cleaned.Substring(0, 2)}-{cleaned.Substring(2)}";
        }
        return cleaned;
    }

    private async Task ComprobarMatricula()
    {
        if (!string.IsNullOrWhiteSpace(matricula) && matricula.Length == 7)
        {
            // Verifica si la matrícula existe y obtiene el nombre completo
            nombreCompleto = await usuarioService.GetUsuNombreByMatriculaAsync(matricula);

            // Si el nombre completo está vacío, la matrícula no es válida
            if (!string.IsNullOrEmpty(nombreCompleto))
            {
                isSubmitDisabled = false; // Habilitar el botón "Continuar"
            }
            else
            {
                showErrorModal = true; // Mostrar un modal de error si la matrícula no es válida
                isSubmitDisabled = true; // Asegurarse de que el botón "Continuar" esté deshabilitado
            }
        }
        else
        {
            showErrorModal = true; // Mostrar un modal de error si la matrícula es incorrecta
            isSubmitDisabled = true; // Asegurarse de que el botón "Continuar" esté deshabilitado
        }
    }

    private async Task HandleSubmit()
    {
        if (matricula.Length == 7 && !string.IsNullOrEmpty(nombreCompleto))
        {
            await sesionStorage.SetItemAsync("usuMatricula", matricula);
            NavigationManager.NavigateTo("/recarga");
        }
        else
        {
            showErrorModal = true;
        }
    }

    private void CloseErrorModal()
    {
        showErrorModal = false;
    }
}